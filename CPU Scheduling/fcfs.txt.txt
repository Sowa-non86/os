#include <stdio.h>

struct Process {
    int pid, at, bt, ft, wt, tat; // Arrival Time (at), Burst Time (bt), Finish Time (ft), Waiting Time (wt), Turnaround Time (tat)
};

void findTimes(struct Process p[], int n, int *totalTat, int *totalWt) {
    *totalTat = 0;
    *totalWt = 0;

    p[0].ft = p[0].at + p[0].bt;
    p[0].tat = p[0].ft - p[0].at;
    p[0].wt = p[0].tat - p[0].bt;

    *totalTat += p[0].tat;
    *totalWt += p[0].wt;

    for (int i = 1; i < n; i++) {
        if (p[i].at > p[i - 1].ft) {
            p[i].ft = p[i].at + p[i].bt;
        } else {
            p[i].ft = p[i - 1].ft + p[i].bt;
        }
        p[i].tat = p[i].ft - p[i].at;
        p[i].wt = p[i].tat - p[i].bt;

        *totalTat += p[i].tat;
        *totalWt += p[i].wt;
    }
}

void drawGanttChart(struct Process p[], int n) {
    printf("\nGantt Chart:\n");

    // Print process blocks
    for (int i = 0; i < n; i++) {
        printf("|   P%d   ", p[i].pid);
    }
    printf("|\n");

    // Print time markers
    int time = p[0].at;
    printf("%d", time);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < 8; j++) {
            printf(" ");
        }
        time = p[i].ft;
        printf("%d", time);
    }
    printf("\n");
}

void FCFS(struct Process p[], int n) {
    int totalTat = 0, totalWt = 0;

    // Calculate times
    findTimes(p, n, &totalTat, &totalWt);

    printf("\nPID\tAT\tBT\tFT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].at, p[i].bt, p[i].ft, p[i].tat, p[i].wt);
    }

    // Print Gantt chart
    drawGanttChart(p, n);

    // Calculate and display total and average times
    float avgTat = (float)totalTat / n;
    float avgWt = (float)totalWt / n;

    printf("\nTotal Turnaround Time: %d\n", totalTat);
    printf("Total Waiting Time: %d\n", totalWt);
    printf("Average Turnaround Time: %.2f\n", avgTat);
    printf("Average Waiting Time: %.2f\n", avgWt);
}

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter Arrival Time and Burst Time for Process %d: ", i + 1);
        scanf("%d %d", &p[i].at, &p[i].bt);
    }

    FCFS(p, n);

    return 0;
}
